#!/usr/bin/env ruby

require 'yaml'
require 'optparse'

CONFIG_FILE = "#{ENV['HOME']}/.config/fantastic-kit/config.yml"

options = {list: false}
OptionParser.new do |opts|
  opts.on('-l', '--list', 'list all') do |l|
    options[:list] = true
  end

  opts.on('-k KEY', '--key=KEY', 'get value for <key>') do |key|
    options[:key] = key
  end

  opts.on('-v VAL', '--value=VAL', 'set config for <key> to <value>') do |value|
    options[:value] = value
  end
end.parse!

def show_help
  msg = <<-EOF
Usage: fk config [options]
  fk config --key=<key>                  -- retrieve value stored at <key>
  fk config --key=<key> --value=<value>  -- set <key> to <value>
  EOF
  puts msg
  exit(1)
end

def valid_option?(opt)
  false unless opt.has_key?(:key) or opt[:list]
  true
end

show_help unless valid_option?(options)

configs = {}

begin
  configs = YAML.load_file(CONFIG_FILE)
rescue => e
  raise "Unable to open config file: #{e}"
end

if options.has_key?(:value)
  configs[options[:key]] = options[:value]
  File.open(CONFIG_FILE, 'w') { |f| f.write configs.to_yaml }
  puts "#{options[:key]}: #{configs[options[:key]]}"
elsif options[:list]
  configs.each do |k, v|
    puts "#{k}: #{v}"
  end
else
  unless configs.has_key?(options[:key])
    puts "invalid key: #{options[:key]}"
    exit(1)
  end
  puts "#{options[:key]}: #{configs[options[:key]]}"
end

